import sys,os,glob,time,shutil,math,random,numpy,operator
from optparse import OptionParser

platform = sys.platform
if sys.platform.startswith('win'):
    platform = 'win'
elif sys.platform.startswith('linux'):
    platform = 'linux'
else:
    print '\nFail. Can not determine system platform.'
    sys.exit()

print '\n',platform.upper()

if platform == 'win':
    usage = 'usage: optimizer_dev <input image; or input folder; or text file with input dir or file, and output dir> <output dir> <job dir> <job number,AOI name> <user name> [options]'
elif platform == 'linux':
    usage = 'usage: optimizer_dev <input image; or input folder; or text file with input dir or file, and output dir> <output dir> [options]'

parser = OptionParser(usage=usage)
parser.add_option("--it",dest='input_type',default='tif',\
help='Input ANY gdal readable file extension. e.g. tif,dem,bil,adf,vrt,pix,ecw,sid,img... www.gdal.org/formats_list.html; Only functions while input path is a dir or textfile list of dirs. Default=tif.')
parser.add_option("--ts",dest='xy_tilesize',default='0,0',\
help='Comma delimited (no spaces) pixel and line dimensions of output tile. Default=0,0 (no tiling)')
parser.add_option("--pb",dest='pixel_buffer',type='int',default=0,\
help='Buffer distance in pixels for output tile. Default=0.')
parser.add_option("--cmp",dest='compression',type='int',default=85,\
help='JPEG compression factor 8 bit imagery format.. Default=85.')
parser.add_option("--emp",dest='empty',type='float',default=0.0,\
help='Maximum mean value for empty output tiles, losers are skipped. Set to -32767 with --dt=2. Value 0.7 recommended for compressed input. Default=0.0')
parser.add_option("--rz",dest='randomize',action='store_true',default=False,\
help='Randomize the order in which input tiles are processed. Not available with --vrt. Default=False.')
parser.add_option("--vrt",dest='vrt',action='store_true',default=False,\
help='Assemble all tiles in folder into a VRT for re-tiling. Only functions while input path is a dir or textfile list of dirs. Default=False.')
parser.add_option("--vrt_proj",dest='vrt_proj',default='',\
help='Target EPSG code for re-projecting the VRT. Default=None.')
parser.add_option("--nc",dest='nocopy',action='store_true',default=False,\
help='No copying of input. Process with remote paths, both read and write. Automatic with --vrt. Default=False.')
parser.add_option("--dt",dest='datatype',default='1',\
help='Dataset type. 1 = 8 bit imagery, 2 = high bit depth DEM or DBM, 3 = 16 bit imagery. Default=1.')
parser.add_option("--id",dest='script_id',type='int',default=1,\
help='ID of the script. Windows platforms only. Default=1.')
parser.add_option("--ns",dest='n_scripts',default=1,type="int",\
help="Number of scripts to launch. Specify 2 to launch one additional instance. Windows platforms only. Default=1.")
parser.add_option("--opts",dest='gdal_options',default='',\
help='gdal_translate options specified with double quote. e.g. "-mask 4" to create external mask from internal band 4. Mask required for MapServer raster sources. Default=None.')
parser.add_option("--upload",dest='gcs',default='',\
help='Upload optimized data to Google Cloud Stroage bucket. Windows platform must have Google Cloud SDK installed.  e.g. existing_bucket_guid/new_folder  Default=None')

(options,args) = parser.parse_args()

if len(args) == 0:
    print '\n'
    parser.print_help()
    sys.exit()

inp = args[0]

if platform == 'win':
    import i3functions_osgeo4w as i
    from i3functions import spatial as s
    from i3functions import common as c
    from osgeo import gdal
    import validate_cloud_optimized_geotiff

    gdalbuildvrt = i.gdalbuildvrt
    gdalwarp = i.gdalwarp
    gdaladdo = i.gdaladdo
    gdal_translate = i.gdal_translate

    if len(args) < 5 and not os.path.isfile(args[0].endswith('.txt')):
        print '\n'
        parser.print_help()
        sys.exit()

    stime = i.printStartTime()

    if inp.endswith('.txt'):
        pass
        workdir = args[1]
        name = args[2]
        username = args[3]
    else:
        outdir = args[1]
        workdir = args[2]
        name = args[3]
        username = args[4]

    if not ',' in name:
        print '\nProject name and AOI name should be specified as comma separated values.\n'
        sys.exit()
    else:
        jobno = name.split(',')[0]
        name = name.replace(',','+')

    fullname = c.getFullName(username)
    if not fullname:
        print 'Nice try. "{}" user name does not exist. Please use a valid user name.\n'.format(username)
        sys.exit()
    else:
        print '\nUser:',fullname

elif platform == 'linux':
    from osgeo import gdal
    import validate_cloud_optimized_geotiff

    gdalbuildvrt = '/opt/i-cubed/bin/gdalbuildvrt'
    gdalwarp = '/opt/i-cubed/bin/gdalwarp'
    gdaladdo = '/opt/i-cubed/bin/gdaladdo'
    gdal_translate = '/opt/i-cubed/bin/gdal_translate'

    if (args) < 2 and not os.path.isfile(inp.endswith('.txt')):
        print '\n'
        parser.print_help()
        sys.exit()

    outdir = args[1]

s_id = options.script_id
ns = options.n_scripts
it = options.input_type
compression = options.compression
x = int(options.xy_tilesize.split(',')[0])
y = int(options.xy_tilesize.split(',')[1])
pb = options.pixel_buffer
randomize = options.randomize
vrt = options.vrt
nocopy = options.nocopy
empty = options.empty
opts = options.gdal_options
datatype = options.datatype
t_epsg = options.vrt_proj
gcs = options.gcs

if platform == 'win':
    if ns > 1:
        for sid in range(2,ns+1):
            launch_cmd = '%s\\optimizer_dev.bat '.format(i.scripts) + ' '.join(['"{}"'.format(a) if not '"' in a else a for a in sys.argv[1:]]) + ' --id {} --ns 1'.format(sid)
            os.system(r'start /SEPARATE {}'.format(launch_cmd))
            print launch_cmd,'\n'

    activef,activef_h = c.writeLockFile(s_id,__file__,workdir,jobno,fullname)

    if not os.path.isdir(workdir):
        os.makedirs(workdir)

    pointer_txt  = os.path.join(os.path.dirname(c.scripts),'ProjMon','%s.txt'%name)
    pointer_h = open(pointer_txt,'w')
    workdir = c.getUNCPath(workdir)
    pointer_h.write('%s,%s,0,%s'%(workdir,0,fullname))
    pointer_h.close()

def removeFile(infile):
    infiles = glob.glob(os.path.splitext(infile)[0]+'*.*')
    for item in infiles:
        try:
            os.remove(item)
        except Exception,e:
            'Could not remove {}'.format(item)
            print e
            sys.exit()

def getTileInfo(infile,temp,xpxsz,ypxsz,pxbuff):
    ds = gdal.Open(infile)
    width = ds.RasterXSize
    height = ds.RasterYSize
    bands = ds.RasterCount

    if width < xpxsz or width == xpxsz:
        xpxsz = width
        print '\nAdjusting user defined x to %s' %(width)
    if xpxsz == 0:
        num_xtile = 1
        last_x = width
    if xpxsz != 0:
        num_xtile = width/xpxsz
        remain_x = operator.mod(width,xpxsz)
        if remain_x > 0 and width > xpxsz:
            num_xtile = num_xtile + 1
            last_x = remain_x
        elif remain_x == width:
            last_x = width
        elif remain_x == 0 and width > xpxsz:
            last_x = xpxsz
        else:
            last_x = width

    if height < ypxsz or height == ypxsz:
        ypxsz = height
        print '\nAdjusting user defined y to %s' %(height)
    if ypxsz == 0:
        num_ytile = 1
        last_y = height
    if ypxsz != 0:
        num_ytile = height/ypxsz
        remain_y = operator.mod(height,ypxsz)
        if remain_y > 0 and height > ypxsz:
            num_ytile = num_ytile + 1
            last_y = remain_y
        elif remain_y == height:
            last_y = height
        elif remain_y == 0 and height > ypxsz:
            last_y = ypxsz
        else:
            last_y = height
    return width,height,num_xtile,num_ytile,last_x,last_y,xpxsz,ypxsz,bands

def getTileName(infile,num_xtile,num_ytile,col_id,row_id):
    if num_xtile > 1 and num_ytile > 1:
        if col_id < 10:
            col = "C0" + str(col_id)
        else:
            col = "C" + str(col_id)
        if row_id < 10:
            row = "R0" + str(row_id)
        else:
            row = "R" + str(row_id)
        outimage = os.path.basename(infile.split('.')[0]) + "_" + col + row
    elif num_xtile == 1 and num_ytile > 1:
        col = "C01"
        if row_id < 10:
            row = "R0" + str(row_id)
        else:
            row = "R" + str(row_id)
        outimage = os.path.basename(infile.split('.')[0]) + "_" + col + row
    elif num_xtile > 1 and num_ytile == 1:
        if col_id < 10:
            col = "C0" + str(col_id)
        else:
            col = "C" + str(col_id)
        row = "R01"
        outimage = os.path.basename(infile.split('.')[0]) + "_" + col + row
    else:
        outimage = os.path.basename(infile.split('.')[0])
    return outimage

def getTileCoords(xpxsz,ypxsz,pxbuff,col_id,row_id,num_xtile,num_ytile,last_x,last_y):
    if num_xtile == 1:
        xstart = 0
        xsize = last_x
    elif num_xtile > 1 and col_id == 1:
        xstart = 0
        xsize = xpxsz + pxbuff
    elif num_xtile > 1 and col_id == num_xtile:
        xstart = ((col_id-1)*xpxsz-pxbuff)
        xsize = last_x + pxbuff
    else:
        xstart = ((col_id-1)*xpxsz-pxbuff)
        xsize = xpxsz + pxbuff + pxbuff
    if num_ytile == 1:
        ystart = 0
        ysize = last_y
    elif num_ytile > 1 and row_id == 1:
        ystart = 0
        ysize = ypxsz + pxbuff
    elif num_ytile > 1 and row_id == num_ytile:
        ystart = ((row_id-1)*ypxsz-pxbuff)
        ysize = last_y + pxbuff
    else:
        ystart = ((row_id-1)*ypxsz-pxbuff)
        ysize = ypxsz + pxbuff + pxbuff
    return xstart,ystart,xsize,ysize

def checkMean(infile,xstart,ystart,xsize,ysize,maxval,num_xtile,num_ytile,datatype):
    if datatype == 2:
        maxval = -32767
    valid = False
    try:
        if num_xtile != 1 and num_ytile != 1:
            ds = gdal.Open(infile)
            band = ds.GetRasterBand(1)
            print 'Srcwin: {} {} {} {}'.format(xstart,ystart,xsize,ysize)
            subset = band.ReadAsArray(xstart,ystart,xsize,ysize,1000,1000)
            stat = numpy.mean(subset)
            print '\nMean: {} > {}'.format(stat,maxval)
            if stat > maxval:
                valid = True
        else:
            valid = True
    except Exception,e:
        valid = True
    ds = None
    return valid

def validateCOG(cog_file):
    try:
        validate_cloud_optimized_geotiff.validate(cog_file)
        msg = '\n{}: is a valid cloud optimized GeoTIFF!'.format(os.path.basename(cog_file))
        return True, msg
    except Exception, e:
        msg = '\n{}: is NOT a valid cloud optimized GeoTIFF!\n{}\n'.format(os.path.basename(cog_file),str(e))
        return False, msg

def assembleVRT(folder,mos_vrt):
    vrt_cmd = '{} "{}" "{}"'.format(i.gdalbuildvrt,mos_vrt,folder)
    try:
        print '\n',vrt_cmd
        os.system(vrt_cmd)
    except Exception,e:
        print '\n',e

def warpVRT(vrt_file,warp_file,t_epsg):
    warp_cmd = '{} -multi -of VRT -r cubic -t_srs EPSG:{} "{}" "{}"'.format(i.gdalwarp,t_epsg,vrt_file,warp_file)
    try:
        print '\n',warp_cmd
        os.system(warp_cmd)
    except Exception,e:
        print '\n',e

def getTileGDALParameters(infile,outimage,temp_dir1,temp_dir2,xstart,ystart,xsize,ysize,compression,opts,bands,datatype):
    wrk_tif = os.path.join(temp_dir2,os.path.splitext(os.path.basename(outimage))[0]+'.tif')
    deflate = os.path.join(temp_dir1,os.path.splitext(os.path.basename(outimage))[0]+'_deflate.tif')
    deflate_cmd = '{} {} -co BIGTIFF=YES -co TILED=YES -co COMPRESS=DEFLATE -oo NUM_THREADS=ALL_CPUS -co NUM_THREADS=ALL_CPUS --config GDAL_CACHEMAX 500 -srcwin {} {} {} {} "{}" "{}"'.format(gdal_translate,opts,xstart,ystart,xsize,ysize,infile,deflate)
    if datatype == '1':
        if bands > 4:
            photometric = 'MINISBLACK'
        elif bands == 1:
            photometric = ''
        else:
            photometric = 'YCBCR'
        gdaladdo_cmd = '{} -r average -oo NUM_THREADS=ALL_CPUS {} 2 4 8 16 32'.format(gdaladdo,deflate)
        gdal_param = '-of GTiff -co TILED=YES -co COMPRESS=JPEG -co JPEG_QUALITY={0} -co BLOCKXSIZE=512 -co BLOCKYSIZE=512 -co PHOTOMETRIC={1} -co COPY_SRC_OVERVIEWS=YES -oo NUM_THREADS=ALL_CPUS -co NUM_THREADS=ALL_CPUS --config JPEG_QUALITY_OVERVIEW {0} --config GDAL_TIFF_OVR_BLOCKSIZE 512 --config GDAL_CACHEMAX 500'.format(compression,photometric)
    elif datatype == '2':
        gdaladdo_cmd = '{} -r nearest -oo NUM_THREADS=ALL_CPUS {} 2 4 8 16 32'.format(gdaladdo,deflate)
        gdal_param = '-of GTiff -co TILED=YES -co COMPRESS=LZW -co PREDICTOR=2 -co COPY_SRC_OVERVIEWS=YES -co BLOCKXSIZE=512 -co BLOCKYSIZE=512 -oo NUM_THREADS=ALL_CPUS -co NUM_THREADS=ALL_CPUS --config GDAL_TIFF_OVR_BLOCKSIZE 512 --config GDAL_CACHEMAX 500 -stats'
    elif datatype == '3':
        if bands > 4:
            photometric = 'MINISBLACK'
        elif bands == 1:
            photometric = ''
        else:
            photometric = 'YCBCR'
        gdaladdo_cmd = '{} -r nearest -oo NUM_THREADS=ALL_CPUS {} 2 4 8 16 32'.format(gdaladdo,deflate)
        gdal_param = '-of GTiff -co TILED=YES -co COMPRESS=LZW -co PREDICTOR=2 -co COPY_SRC_OVERVIEWS=YES -co BLOCKXSIZE=512 -co BLOCKYSIZE=512 -oo NUM_THREADS=ALL_CPUS -co NUM_THREADS=ALL_CPUS --config GDAL_TIFF_OVR_BLOCKSIZE 512 --config GDAL_CACHEMAX 500 -stats'
    translate_cmd = '{} {} "{}" "{}"'.format(gdal_translate,gdal_param,deflate,wrk_tif)
    return wrk_tif,gdaladdo_cmd,translate_cmd,deflate_cmd,gdal_param

def optimizeRaster(wrk_tif,outdir,outimage,temp_dir,num_xtile,num_ytile,gdaladdo_cmd,translate_cmd,deflate_cmd,gdal_param,datatype):
    if platform == 'win' and not num_xtile == 1 and not num_ytile == 1:
        wrk_tile = i.createWrkfile(os.path.join(outdir,outimage)+'.tif')
    try:
        print '\nCreating cloud optimized GeoTIFF...'
        print '\n',deflate_cmd
        os.system(deflate_cmd)
        print '\n',gdaladdo_cmd
        os.system(gdaladdo_cmd)
        print '\n',gdal_param
        os.system(translate_cmd)
    except Exception,e:
        print '\n',e

    valid, valid_msg = validateCOG(wrk_tif)

    if valid:
        if platform == 'win':
            i.copyFile(wrk_tif,outdir,exclude='/xf *.xml *.vrt')
        elif platform == 'linux':
            cp_cmd = 'cp {} {}'.format(wrk_tif,outdir)
            print 'Copying...'
            os.system(copy_cmd)
    else:
        print valid_msg,'\nHalting further processing!  Check gdal_translate parameters!'
        sys.exit()

    if platform == 'win' and not num_xtile == 1 and not num_ytile == 1:
        os.remove(wrk_tile)

def uploadGCS(outdir, bucket_folder):
    upload_cmd = 'gsutil -m cp -r {}\*.tif* gs://{}/'.format(outdir, bucket_folder)
    try:
        print '\nUploading data to Google Cloud Storage...\n\n',upload_cmd
        os.system(upload_cmd)
    except Exception,e:
        print '\n',e

################################################################################

if os.path.isfile(inp) and not inp.endswith('.txt'):
    if platform == 'win':
        comp_name,no_processors,temp1,temp2 = i.createTempdir('optimizer',s_id)
    elif platform == 'linux':
        temp1 = '/optimizer_temp1'
        temp2 = '/optimizer_temp2'
        if not os.path.exists(temp1):
            os.makedirs(temp1)
        if not os.path.exists(temp2):
            os.makedirs(temp2)

    it = inp.split('.')[1]
    temp_inimage = os.path.join(temp1,os.path.basename(inp))
    infolder = os.path.split(inp)[0]

    if platform == 'win':
        stime_tile = time.time()
        wrk_file = os.path.join(workdir,'{}.wrk'.format(os.path.splitext(os.path.basename(inp))[0]))
        wrk_message = c.createWrkFileDirectly(wrk_file,id=s_id,count=1,total=1,indir=infolder,outdir=outdir,workdir=workdir,stime_tile=stime_tile)
        if wrk_message != 'Created':
            print 'Done'
            sys.exit()
        else:
            process = True
    elif platform == 'linux':
        if not os.path.isfile(os.path.join(os.path.join(outdir,'{}.tif'.format(os.path.splitext(os.path.basename(inp))[0])))):
            process = True
        else:
            print 'Done'
            sys.exit()

    if platform == 'win':
        activef,activef_h = c.writeLockFile(s_id,__file__,workdir,jobno,fullname)

    if process:
        csv_table = ['Raster,Name']
        width,height,num_xtile,num_ytile,last_x,last_y,xpxsz,ypxsz,b = getTileInfo(inp,temp1,x,y,pb)
        if not nocopy:
            if it == 'adf':
                if platform == 'win':
                    i.copyFolder(infolder,temp1)
                elif platform == 'linux':
                    cp_cmd = 'cp {} {}'.format(os.path.join(infolder,'*'),temp1)
                    print 'Copying...'
                    os.system(copy_cmd)
            elif it == 'vrt':
                temp_inimage = inp
                nocopy = True
            else:
                if platform == 'win':
                    i.copyFile(inp,temp1,exclude='/xf *.aux')
                elif platform == 'linux':
                    cp_cmd = 'cp {} {}'.format(inp,temp1)
                    print 'Copying...'
                    os.system(copy_cmd)
        else:
            temp_inimage = inp

        for k in range(1,num_xtile+1):
            for j in range(1,num_ytile+1):
                outname = getTileName(temp_inimage,num_xtile,num_ytile,k,j)
                print '\nInput Image: {}\nImage Size: {}, {}\nOutput Image: {}.tif\nCols/Rows: {}x{}'.format(os.path.basename(temp_inimage),width,height,outname,num_xtile,num_ytile)
                xstart,ystart,xsize,ysize = getTileCoords(xpxsz,ypxsz,pb,k,j,num_xtile,num_ytile,last_x,last_y)
                if checkMean(temp_inimage,xstart,ystart,xsize,ysize,empty,num_xtile,num_ytile,datatype):
                    temp_outimage,gdaladdo_cmd,translate_cmd,deflate_cmd,gdal_param = getTileGDALParameters(temp_inimage,outname,temp1,temp2,xstart,ystart,xsize,ysize,compression,opts,b,datatype)
                    optimizeRaster(temp_outimage,outdir,outname,temp2,num_xtile,num_ytile,gdaladdo_cmd,translate_cmd,deflate_cmd,gdal_param,datatype)
                    if k == 1 and j == 1:
                        if platform == 'win':
                            try:
                                image_size_gb = s.getUncompressedSize(temp_outimage)
                            except Exception,e:
                                print '\n',e
                                image_size_gb = 1
                    if gcs != '':
                        csv_table.append('/vsicurl/http://storage.googleapis.com/{}/{},{}'.format(gcs,os.path.basename(temp_outimage),os.path.basename(temp_outimage).replace('.tif','')))
                else:
                    image_size_gb = 1
                    print 'Fail. Output tile contains only NoData and will be skipped.'
                j+=1
                continue
            k+=1
            continue

        if gcs != '':
            uploadGCS(outdir,gcs)

        removeFile(os.path.join(temp1,'*'))

        if platform == 'win':
            pointer_h = open(pointer_txt,'w')
            pointer_workdir = c.getUNCPath(workdir)
            pointer_h.write('%s,%s,%s,%s'%(pointer_workdir,1,image_size_gb,fullname))
            pointer_h.close()
            ptime_tile = time.time() - stime_tile
            c.createDoneFile(wrk_file,id=s_id,ptime_tile=ptime_tile,wrk_file_h = '',tile_size_gb=image_size_gb,jobno=jobno)

    if gcs != '':
        print 'Writing table...'
        logfile = os.path.join(temp2,'_table.txt')
        with open(logfile, 'a+') as lf:
            for item in csv_table:
                lf.write('{}\n'.format(item))

        if platform == 'win':
            i.copyFile(logfile,outdir,exclude='/xf *.tif* *.vrt')
        elif platform == 'linux':
            cp_cmd = 'cp {} {}'.format(logfile,outdir)
            print 'Copying...'
            os.system(copy_cmd)

    removeFile(os.path.join(temp2,'*'))

elif os.path.isdir(inp):
    if platform == 'win':
        comp_name,no_processors,temp1,temp2 = i.createTempdir('optimizer',s_id)
    elif platform == 'linux':
        temp1 = '/optimizer_temp1'
        temp2 = '/optimizer_temp2'
        if not os.path.exists(temp1):
            os.makedirs(temp1)
        if not os.path.exists(temp2):
            os.makedirs(temp2)

    pattern = os.path.join(inp,'*.{}'.format(it))
    inimages = []
    if vrt:
        names = glob.glob(pattern)
        wrk_vrt = os.path.join(temp1, os.path.basename(names[0]).replace('.{}'.format(it),'.vrt'))
        inimages.append(wrk_vrt)
        nocopy = True
    else:
        inimages = glob.glob(pattern)
        if randomize:
            random.shuffle(inimages)
    len_inimages = len(inimages)
    count = 0
    infolder = inp

    if platform == 'win':
        pointer_txt  = os.path.join(os.path.dirname(c.scripts),'ProjMon','%s.txt'%name)
        pointer_h = open(pointer_txt,'w')
        workdir = c.getUNCPath(workdir)
        pointer_h.write('%s,%s,0,%s'%(workdir,len_inimages,fullname))
        pointer_h.close()

    for image in inimages:
        temp_inimage = os.path.join(temp1,os.path.basename(image))
        count +=1

        if platform == 'win':
            stime_tile = time.time()
            wrk_file = os.path.join(workdir,'%s.wrk' %os.path.splitext(os.path.basename(image))[0])
            wrk_message = c.createWrkFileDirectly(wrk_file,id=s_id,count=count,total=len_inimages,indir=infolder,outdir=outdir,workdir=workdir,stime_tile=stime_tile)
            if wrk_message != 'Created':
                print 'Done'
                sys.exit()
            else:
                process = True
        elif platform == 'linux':
            if not os.path.isfile(os.path.join(os.path.join(outdir,'{}*.tif'.format(os.path.splitext(os.path.basename(inp))[0])))):
                process = True
            else:
                print 'Done'
                sys.exit()

        if platform == 'win':
            activef,activef_h = c.writeLockFile(s_id,__file__,workdir,jobno,fullname)

        if process:
            csv_table = ['Raster,Name']
            if not nocopy or not vrt:
                if platform == 'win':
                    i.copyFile(image,temp1,exclude='/xf *.aux')
                elif platform == 'linux':
                    cp_cmd = 'cp {} {}'.format(image,temp1)
                    print 'Copying...'
                    os.system(copy_cmd)
            else:
                temp_inimage = image
            if vrt:
                assembleVRT(pattern,temp_inimage)
                if t_epsg != '':
                    wrk_warp = os.path.join(temp2,os.path.basename(temp_inimage))
                    warpVRT(temp_inimage,wrk_warp,t_epsg)
                    temp_inimage = wrk_warp
            width,height,num_xtile,num_ytile,last_x,last_y,xpxsz,ypxsz,b = getTileInfo(temp_inimage,temp1,x,y,pb)
            for k in range(1,num_xtile+1):
                for j in range(1,num_ytile+1):
                    outname = getTileName(temp_inimage,num_xtile,num_ytile,k,j)
                    print '\nInput Image: {}\nImage Size: {}, {}\nOutput Image: {}.tif\nCols/Rows: {}x{}'.format(os.path.basename(temp_inimage),width,height,outname,num_xtile,num_ytile)
                    xstart,ystart,xsize,ysize = getTileCoords(xpxsz,ypxsz,pb,k,j,num_xtile,num_ytile,last_x,last_y)
                    if checkMean(temp_inimage,xstart,ystart,xsize,ysize,empty,num_xtile,num_ytile,datatype):
                        temp_outimage,gdaladdo_cmd,translate_cmd,deflate_cmd,gdal_param = getTileGDALParameters(temp_inimage,outname,temp1,temp2,xstart,ystart,xsize,ysize,compression,opts,b,datatype)
                        optimizeRaster(temp_outimage,outdir,outname,temp2,num_xtile,num_ytile,gdaladdo_cmd,translate_cmd,deflate_cmd,gdal_param,datatype)
                        if k == 1 and j == 1:
                            if platform == 'win':
                                try:
                                    image_size_gb = s.getUncompressedSize(temp_outimage)
                                except Exception,e:
                                    print '\n',e
                                    image_size_gb = 1
                        if gcs != '':
                            csv_table.append('/vsicurl/http://storage.googleapis.com/{}/{},{}'.format(gcs,os.path.basename(temp_outimage),os.path.basename(temp_outimage).replace('.tif','')))
                    else:
                        image_size_gb = 1
                        print 'Fail. Output tile contains only NoData and will be skipped.'
                    j+=1
                    continue
                k+=1
                continue

            if gcs != '':
                uploadGCS(outdir,gcs)

            removeFile(os.path.join(temp1,'*.*'))

            if platform == 'win':
                pointer_h = open(pointer_txt,'w')
                pointer_workdir = c.getUNCPath(workdir)
                pointer_h.write('%s,%s,%s,%s'%(pointer_workdir,1,image_size_gb,fullname))
                pointer_h.close()
                ptime_tile = time.time() - stime_tile
                c.createDoneFile(wrk_file,id=s_id,ptime_tile=ptime_tile,wrk_file_h = '',tile_size_gb=image_size_gb,jobno=jobno)

        if gcs != '':
            print 'Writing table...'
            logfile = os.path.join(temp2,'_table.txt')
            with open(logfile, 'a+') as lf:
                for item in csv_table:
                    lf.write('{}\n'.format(item))

            if platform == 'win':
                i.copyFile(logfile,outdir,exclude='/xf *.tif* *.vrt')
            elif platform == 'linux':
                cp_cmd = 'cp {} {}'.format(logfile,outdir)
                print 'Copying...'
                os.system(copy_cmd)

        removeFile(os.path.join(temp2,'*.*'))

elif os.path.isfile(inp) and inp.endswith('.txt'):
    if platform == 'win':
        comp_name,no_processors,temp1,temp2 = i.createTempdir('optimizer',s_id)
    elif platform == 'linux':
        temp1 = '/optimizer_temp1'
        temp2 = '/optimizer_temp2'
        if not os.path.exists(temp1):
            os.makedirs(temp1)
        if not os.path.exists(temp2):
            os.makedirs(temp2)

    lines = open(inp).readlines()
    for line in lines:
        line = line.strip()
        if line:
            indir = line.split()[0]
            outdir = line.split()[1]
            inimages = []
            if os.path.isfile(indir):
                inimages.append(indir)
                total = 1
            elif os.path.isdir(indir):
                pattern = os.path.join(indir,'*.{}'.format(it))
                if vrt:
                    names = glob.glob(pattern)
                    wrk_vrt = os.path.join(temp1, os.path.basename(names[0]).replace('.{}'.format(it),'.vrt'))
                    inimages.append(wrk_vrt)
                    nocopy = True
                else:
                    inimages = glob.glob(pattern)
                    if randomize:
                        random.shuffle(inimages)

            print '\nInput: {}\nOutput: {}\n'.format(indir,outdir)

            len_inimages = len(inimages)
            count = 0
            infolder = os.path.split(inp)[0]

            if platform == 'win':
                pointer_txt  = os.path.join(os.path.dirname(c.scripts),'ProjMon','%s.txt'%name)
                pointer_h = open(pointer_txt,'w')
                workdir = c.getUNCPath(workdir)
                pointer_h.write('%s,%s,0,%s'%(workdir,len_inimages,fullname))
                pointer_h.close()

            for image in inimages:
                temp_inimage = os.path.join(temp1,os.path.basename(image))
                count +=1

                if platform == 'win':
                    stime_tile = time.time()
                    wrk_file = os.path.join(workdir,'%s.wrk' %os.path.splitext(os.path.basename(image))[0])
                    wrk_message = c.createWrkFileDirectly(wrk_file,id=s_id,count=count,total=len_inimages,indir=indir,outdir=outdir,workdir=workdir,stime_tile=stime_tile)
                    if wrk_message != 'Created':
                        print 'Done'
                        sys.exit()
                    else:
                        process = True
                elif platform == 'linux':
                    if not os.path.isfile(os.path.join(os.path.join(outdir,'{}*.tif'.format(os.path.splitext(os.path.basename(inp))[0])))):
                        process = True
                    else:
                        print 'Done'
                        sys.exit()

                if platform == 'win':
                    activef,activef_h = c.writeLockFile(s_id,__file__,workdir,jobno,fullname)

                if process:
                    csv_table = ['Raster,Name']
                    if not nocopy or not vrt:
                        if platform == 'win':
                            i.copyFile(image,temp1,exclude='/xf *.aux')
                        elif platform == 'linux':
                            cp_cmd = 'cp {} {}'.format(image,temp1)
                            print 'Copying...'
                            os.system(copy_cmd)
                    else:
                        temp_inimage = image
                    if vrt:
                        assembleVRT(pattern,temp_inimage)
                        if t_epsg != '':
                            wrk_warp = os.path.join(temp2,os.path.basename(temp_inimage))
                            warpVRT(temp_inimage,wrk_warp,t_epsg)
                            temp_inimage = wrk_warp
                    width,height,num_xtile,num_ytile,last_x,last_y,xpxsz,ypxsz,b = getTileInfo(temp_inimage,temp1,x,y,pb)
                    for k in range(1,num_xtile+1):
                        for j in range(1,num_ytile+1):
                            outname = getTileName(temp_inimage,num_xtile,num_ytile,k,j)
                            print '\nInput Image: {}\nImage Size: {}, {}\nOutput Image: {}.tif\nCols/Rows: {}x{}'.format(os.path.basename(temp_inimage),width,height,outname,num_xtile,num_ytile)
                            xstart,ystart,xsize,ysize = getTileCoords(xpxsz,ypxsz,pb,k,j,num_xtile,num_ytile,last_x,last_y)
                            if checkMean(temp_inimage,xstart,ystart,xsize,ysize,empty,num_xtile,num_ytile,datatype):
                                temp_outimage,gdaladdo_cmd,translate_cmd,deflate_cmd,gdal_param = getTileGDALParameters(temp_inimage,outname,temp1,temp2,xstart,ystart,xsize,ysize,compression,opts,b,datatype)
                                optimizeRaster(temp_outimage,outdir,outname,temp2,num_xtile,num_ytile,gdaladdo_cmd,translate_cmd,deflate_cmd,gdal_param,datatype)
                                if k == 1 and j == 1:
                                    if platform == 'win':
                                        try:
                                            image_size_gb = s.getUncompressedSize(temp_outimage)
                                        except Exception,e:
                                            print '\n',e
                                            image_size_gb = 1
                                if gcs != '':
                                    csv_table.append('/vsicurl/http://storage.googleapis.com/{}/{},{}'.format(gcs,os.path.basename(temp_outimage),os.path.basename(temp_outimage).replace('.tif','')))
                            else:
                                image_size_gb = 1
                                print 'Fail. Output tile contains only NoData and will be skipped.'
                            j+=1
                            continue
                        k+=1
                        continue

                    if gcs != '':
                        uploadGCS(outdir,gcs)

                    removeFile(os.path.join(temp1,'*.*'))

                    if platform == 'win':
                        pointer_h = open(pointer_txt,'w')
                        pointer_workdir = c.getUNCPath(workdir)
                        pointer_h.write('%s,%s,%s,%s'%(pointer_workdir,1,image_size_gb,fullname))
                        pointer_h.close()
                        ptime_tile = time.time() - stime_tile
                        c.createDoneFile(wrk_file,id=s_id,ptime_tile=ptime_tile,wrk_file_h = '',tile_size_gb=image_size_gb,jobno=jobno)

                if gcs != '':
                    print 'Writing table...'
                    logfile = os.path.join(temp2,'_table.txt')
                    with open(logfile, 'a+') as lf:
                        for item in csv_table:
                            lf.write('{}\n'.format(item))

                    if platform == 'win':
                        i.copyFile(logfile,outdir,exclude='/xf *.tif* *.vrt')
                    elif platform == 'linux':
                        cp_cmd = 'cp {} {}'.format(logfile,outdir)
                        print 'Copying...'
                        os.system(copy_cmd)

                removeFile(os.path.join(temp1,'*.*'))

if platform == 'win':
    c.printProcessingTime(stime)
    c.removeLockFile(activef,activef_h)
